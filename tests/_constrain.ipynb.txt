{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "45f91140-c47c-42f3-a0d2-d0c13acd7d32",
   "metadata": {},
   "outputs": [],
   "source": [
    "# load important dependencies\n",
    "import numpy as np\n",
    "import sympy as sp\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e2ba0b3-e6f7-496e-b2c8-847074cc9788",
   "metadata": {},
   "source": [
    "# 约束优化算法（optimtool.constrain）\n",
    "\n",
    "```python\n",
    "import optimtool.constrain as oc\n",
    "oc.[方法名].[函数名]([目标函数], [参数表], [等式约束表], [不等式约数表], [初始迭代点])\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "11ce22e8-0e1a-46cc-af6c-396a238a2a19",
   "metadata": {},
   "outputs": [],
   "source": [
    "import optimtool.constrain as oc\n",
    "f, x1, x2 = sp.symbols(\"f x1 x2\")\n",
    "f = (x1 - 2)**2 + (x2 - 1)**2\n",
    "c1 = x1 - x2 - 1\n",
    "c2 = 0.25*x1**2 - x2 - 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c71c5ba3-1c24-48dd-a59a-c70ac66cd75a",
   "metadata": {},
   "source": [
    "## 等式约束（equal）\n",
    "\n",
    "```python\n",
    "oc.equal.[函数名]([目标函数], [参数表], [等式约束表], [初始迭代点])\n",
    "```\n",
    "\n",
    "| 方法头                                                                                                                                                   | 解释        |\n",
    "| ----------------------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n",
    "| penalty_quadratice(funcs: FuncArray, args: FuncArray, cons: FuncArray, x_0: PointArray, draw: Optional[bool]=True, output_f: Optional[bool]=False, method: Optional[str]=\"gradient_descent\", sigma: Optional[float]=10, p: Optional[float]=2, epsilon: Optional[float]=1e-4, k: Optional[int]=0) -> OutputType                     | 增加二次罚项    |\n",
    "| lagrange_augmentede(funcs: FuncArray, args: ArgArray, cons: FuncArray, x_0: PointArray, draw: Optional[bool]=True, output_f: Optional[bool]=False, method: Optional[str]=\"gradient_descent\", lamk: Optional[float]=6, sigma: Optional[float]=10, p: Optional[float]=2, etak: Optional[float]=1e-4, epsilon: Optional[float]=1e-6, k: Optional[int]=0) -> OutputType | 增广拉格朗日乘子法 |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "25c3579c-e7f1-4512-bb7a-2c5d5d8d20fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(array([1.99999998, 1.00000002]), 5)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oc.equal.lagrange_augmentede(f, (x1, x2), c1, (1, 0.5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14c37a5a-4a12-4a12-ab1f-42d0bbbd176d",
   "metadata": {},
   "source": [
    "## 不等式约束（unequal）\n",
    "\n",
    "```python\n",
    "oc.unequal.[函数名]([目标函数], [参数表], [不等式约束表], [初始迭代点])\n",
    "```\n",
    "\n",
    "| 方法头                                                                                                                                                                      | 解释        |\n",
    "| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------- |\n",
    "| penalty_quadraticu(funcs: FuncArray, args: ArgArray, cons: FuncArray, x_0: PointArray, draw: Optional[bool]=True, output_f: Optional[bool]=False, method: Optional[str]=\"gradient_descent\", sigma: Optional[float]=10, p: Optional[float]=0.4, epsilon: Optional[float]=1e-10, k: Optional[int]=0) -> OutputType                                     | 增加二次罚项    |\n",
    "| penalty_interior_fraction(funcs: FuncArray, args: ArgArray, cons: FuncArray, x_0: PointArray, draw: Optional[bool]=True, output_f: Optional[bool]=False, method: Optional[str]=\"gradient_descent\", sigma: Optional[float]=12, p: Optional[float]=0.6, epsilon: Optional[float]=1e-6, k: Optional[int]=0) -> OutputType                              | 增加分式函数罚项  |\n",
    "| lagrange_augmentedu(funcs: FuncArray, args: ArgArray, cons: FuncArray, x_0: PointArray, draw: Optional[bool]=True, output_f: Optional[bool]=False, method: Optional[str]=\"gradient_descent\", muk: Optional[float]=10, sigma: Optional[float]=8, alpha: Optional[float]=0.2, beta: Optional[float]=0.7, p: Optional[float]=2, eta: Optional[float]=1e-1, epsilon: Optional[float]=1e-4, k: Optional[int]=0) -> OutputType | 增广拉格朗日乘子法 |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "26385428-275a-4233-af14-f38613374a3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(array([1.9999992, 1.0000008]), 32)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oc.unequal.penalty_interior_fraction(f, (x1, x2), c2, (1.5, 0.5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "481769cd-3e3f-4c73-9adb-d1331aebce9e",
   "metadata": {},
   "source": [
    "## 混合等式约束（mixequal）\n",
    "\n",
    "```python\n",
    "oc.mixequal.[函数名]([目标函数], [参数表], [等式约束表], [不等式约束表], [初始迭代点])\n",
    "```\n",
    "\n",
    "| 方法头                                                                                                                                                                                                  | 解释        |\n",
    "| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n",
    "| penalty_quadraticm(funcs: FuncArray, args: ArgArray, cons_equal: FuncArray, cons_unequal: FuncArray, x_0: PointArray, draw: Optional[bool]=True, output_f: Optional[bool]=False, method: Optional[str]=\"gradient_descent\", sigma: Optional[float]=10, p: Optional[float]=0.6, epsilon: Optional[float]=1e-10, k: Optional[int]=0) -> OutputType                                             | 增加二次罚项    |\n",
    "| penalty_L1(funcs: FuncArray, args: ArgArray, cons_equal: FuncArray, cons_unequal: FuncArray, x_0: PointArray, draw: Optional[bool]=True, output_f: Optional[bool]=False, method: Optional[str]=\"gradient_descent\", sigma: Optional[float]=1, p: Optional[float]=0.6, epsilon: Optional[float]=1e-10, k: Optional[int]=0) -> OutputType                                                     | L1精确罚函数法  |\n",
    "| lagrange_augmentedm(funcs: FuncArray, args: ArgArray, cons_equal: FuncArray, cons_unequal: FuncArray, x_0: PointArray, draw: Optional[bool]=True, output_f: Optional[bool]=False, method: Optional[str]=\"gradient_descent\", lamk: Optional[float]=6, muk: Optional[float]=10, sigma: Optional[float]=8, alpha: Optional[float]=0.5, beta: Optional[float]=0.7, p: Optional[float]=2, eta: Optional[float]=1e-3, epsilon: Optional[float]=1e-4, k: Optional[int]=0) -> OutputType | 增广拉格朗日乘子法 |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "733f0757-f44a-42f8-900f-26501b7e1411",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(array([2., 1.]), 47)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oc.mixequal.penalty_L1(f, (x1, x2), c1, c2, (1.5, 0.5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3aee294e-09b9-40fe-b2e2-80faeb3c2d88",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.12 ('base')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  },
  "vscode": {
   "interpreter": {
    "hash": "5179d32cf6ec497baf3f8a3ef987cc77c5d2dc691fdde20a56316522f61a7323"
   }
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
